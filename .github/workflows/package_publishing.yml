name: Package Publishing

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target:'
        required: true
        default: 'MINOR'
      pypi:
        description: 'PyPI:'
        required: true
        default: 'YES'
      conda:
        description: 'Conda:'
        required: true
        default: 'YES'

jobs:
  task:
    name: Task
    runs-on: ubuntu-latest
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
        architecture: x64
    - name: Version Bump
      id: bump
      env:
        TARGET: ${{ github.event.inputs.target }}
        PYPI: ${{ github.event.inputs.pypi }}
        CONDA: ${{ github.event.inputs.conda }}
        VERSION_REGEX: __version__ = '\d+\.\d+\.\d+'
        VERSION_FILE: pydtmc/__init__.py
      run: |
        TARGET="${TARGET^^}"
        if [[ "$TARGET" != "MAJOR" ]] && [[ "$TARGET" != "MINOR" ]] && [[ "$TARGET" != "RELEASE" ]] && [[ "$TARGET" != "NONE" ]]; then
          echo "INVALID INPUT (TARGET)"
          exit 1
        fi
        PYPI="${PYPI^^}"
        if [[ "$PYPI" != "YES" ]] && [[ "$PYPI" != "NO" ]]; then
          echo "INVALID INPUT (PYPI)"
          exit 1
        fi
        CONDA="${CONDA^^}"
        if [[ "$CONDA" != "YES" ]] && [[ "$CONDA" != "NO" ]]; then
          echo "INVALID INPUT (CONDA)"
          exit 1
        fi
        if [[ "$PYPI" == "YES" ]] && [[ "$TARGET" == "NONE" ]]; then
          echo "INVALID INPUT (PYPI=YES && TARGET=NONE)"
          exit 1
        fi
        if [[ "$PYPI" == "NO" ]] && [[ "$CONDA" == "NO" ]]; then
          echo "INVALID INPUT (PYPI=NO && CONDA=NO)"
          exit 1
        fi
        grep -P "$VERSION_REGEX" "$VERSION_FILE"
        VERSION=$(grep -P "$VERSION_REGEX" "$VERSION_FILE" | cut -d "'" -f2)
        VERSION_MAJOR=$(echo "$VERSION" | cut -d "." -f1)
        VERSION_MINOR=$(echo "$VERSION" | cut -d "." -f2)
        VERSION_RELEASE=$(echo "$VERSION" | cut -d "." -f3)
        if [[ "$TARGET" == "MAJOR" ]]; then
          VERSION_MAJOR=$(($VERSION_MAJOR+1))
          VERSION_MINOR=0
          VERSION_RELEASE=0
        elif [[ "$TARGET" == "MINOR" ]]; then
          VERSION_MINOR=$(($VERSION_MINOR+1))
          VERSION_RELEASE=0
        elif [[ "$TARGET" == "RELEASE" ]]; then
          VERSION_RELEASE=$(($VERSION_RELEASE+1))
        fi
        VERSION=$(printf "%d.%d.%d" $VERSION_MAJOR $VERSION_MINOR $VERSION_RELEASE 2>/dev/null)
        PATTERN=$(grep -Poh "$VERSION_REGEX" "$VERSION_FILE")
        sed -i "s/$PATTERN/__version__ = '$VERSION'/g" "$VERSION_FILE"
        grep -P "$VERSION_REGEX" "$VERSION_FILE"
        echo "::set-output name=target::$TARGET"
        echo "::set-output name=pypi::$PYPI"
        echo "::set-output name=conda::$CONDA"
        echo "::set-output name=version::$VERSION"
    - name: PyPI Cache
      id: pypi_cache
      env:
        PYPI: ${{ steps.bump.outputs.pypi }}
      if: env.PYPI == 'YES'
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: PyPI Dependencies Installation
      if: env.PYPI == 'YES' && steps.pypi_cache.outputs.cache-hit != 'true'
      run: |
        pip install --quiet --upgrade pip
        pip install --quiet --upgrade --upgrade-strategy eager -r requirements.txt --use-feature=in-tree-build
        pip install --quiet --upgrade --upgrade-strategy eager -e .[build]
    - name: PyPI Publishing
      env:
        PYPI: ${{ steps.bump.outputs.pypi }}
        TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      if: env.PYPI == 'YES'
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
    - name: Conda Publishing
      env:
        TARGET: ${{ steps.bump.outputs.target }}
        CONDA: ${{ steps.bump.outputs.conda }}
        VERSION: ${{ steps.bump.outputs.version }}
        META_REGEX: sha256_placeholder
        META_FILE: meta.yaml
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      if: env.CONDA == 'YES'
      run: |
        conda update --quiet conda
        conda install --quiet conda-build anaconda-client
        wget "https://pypi.io/packages/source/P/PyDTMC/PyDTMC-${VERSION}.tar.gz" -O "/tmp/PyDTMC-${VERSION}.tar.gz"
        SHA256=$(openssl sha256 "/tmp/PyDTMC-${VERSION}.tar.gz" | awk '{print $2}')
        grep -P "$META_REGEX" "$META_FILE"
        sed -i "s/$META_REGEX/$SHA256/g" "$META_FILE"
        grep -P "$SHA256" "$META_FILE"
        conda config --set always_yes yes
        conda config --set anaconda_upload yes
        conda config --set changeps1 no
        conda build . --output-folder /tmp/conda-build
    - name: Version Commit
      env:
        TARGET: ${{ steps.bump.outputs.target }}
        VERSION: ${{ steps.bump.outputs.version }}
      if: env.TARGET != 'NONE'
      run: |
        git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
        git config --local user.name "${{ secrets.BOT_USERNAME }}"
        git config --local user.email "${{ secrets.BOT_EMAIL }}"
        git add --a
        git commit -m "Release $VERSION"
        git push
