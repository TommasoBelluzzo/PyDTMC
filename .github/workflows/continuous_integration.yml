name: "Continuous Integration"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  initialization:
    name: Initialization
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Dependencies Installation
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --quiet --upgrade pip
        pip install --quiet --upgrade -r requirements.txt
        pip install --quiet --upgrade -e .[lint]
        pip install --quiet --upgrade -e .[docs]
        pip install --quiet --upgrade -e .[package]
        pip install --quiet --upgrade -e .[build]
        pip install --quiet --upgrade -e .[tests]
  linting:
    name: Linting
    needs: initialization
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Linting
      run: |
        flake8 .
        pylint docs/
        pylint pydtmc/
        pylint tests/
  documentation:
    name: Documentation
    needs: linting
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Documentation
      run: |
        make -C docs/ doctest SPHINX_OPTS=-an
        make -C docs/ linkcheck SPHINX_OPTS=-an
        make -C docs/ coverage SPHINX_OPTS=-an
  build:
    name: Build
    needs: documentation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Build
      run: python setup.py sdist bdist_wheel
  testing_coverage:
    name: Testing & Coverage
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Libraries Installation
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update --quiet --yes
          sudo apt-get install --quiet --yes graphviz
        elif [ "$RUNNER_OS" == "Windows" ]; then 
          choco upgrade --limitoutput --yes chocolatey
          choco install --limitoutput --yes graphviz
        else
          brew update
          brew install graphviz
        fi
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Testing & Coverage
      env:
        COVERALLS_SERVICE_NAME: github-actions
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        pytest --cov=pydtmc tests/
        coveralls
