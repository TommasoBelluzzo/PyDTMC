{
  "extract_numeric_data": [
    {
      "value": [],
      "evaluate": false,
      "is_valid": true
    },
    {
      "value": [0.4],
      "evaluate": false,
      "is_valid": true
    },
    {
      "value": [[], [], []],
      "evaluate": false,
      "is_valid": true
    },
    {
      "value": [[], [], [3]],
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": [[3], [0], [3]],
      "evaluate": false,
      "is_valid": true
    },
    {
      "value": [0.81, 0.84, 0.46, 0.73],
      "evaluate": false,
      "is_valid": true
    },
    {
      "value": [7, 7, 7],
      "evaluate": false,
      "is_valid": true
    },
    {
      "value": [145, 297, 189, 23, 47, 582],
      "evaluate": false,
      "is_valid": true
    },
    {
      "value": [["NaN", 0.4, 0.4], [0.1, "Infinity", 0.3], ["NaN", 0.0, 0.7]],
      "evaluate": false,
      "is_valid": true
    },
    {
      "value": {"V1": 0.0, "V2": 0.0, "V3": 7.5, "V4": 0.0},
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": "tuple([5, 8, 0])",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "set([-4, -4, 1, 6, -4, 0])",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "frozenset([10, 100, 1000, float('inf')])",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "range(25)",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "np.array([[2, 3], [3, 2], [2, 3]])",
      "evaluate": true,
      "is_valid": true
    },
    {
      "value": "spsp.coo_matrix((np.array([4, 5, 7, 9]), (np.array([0, 3, 1, 0]), np.array([0, 3, 1, 2]))), shape=(4, 4))",
      "evaluate": true,
      "is_valid": true
    },
    {
      "value": "spsp.csr_matrix(np.array([[1, 0, 0, 1, 0, 0], [0, 0, 2, 0, 0, 1], [0, 0, 0, 2, 0, 0]]))",
      "evaluate": true,
      "is_valid": true
    },
    {
      "value": "pd.Series([0.5, 14.7, 10.1, float('nan'), 6.0, 8.3])",
      "evaluate": true,
      "is_valid": true
    },
    {
      "value": "pd.DataFrame([{'a': 1, 'b': 2}, {'a': 5, 'b': 10, 'c': 20}])",
      "evaluate": true,
      "is_valid": true
    },
    {
      "value": null,
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": false,
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": 12.26668000,
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": 42,
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": "mnopq",
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": [null, null],
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": [true, false, false, true],
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": [["A", "B"], ["C", "D"], ["E", "F"]],
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": {"1": "A", "2": "B", "3": "C"},
      "evaluate": false,
      "is_valid": false
    },
    {
      "value": "tuple(['A', None, 'B'])",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "set(['A', 4, 8, 11])",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "frozenset([3, 3, 1, 'Z', None])",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "bytes.fromhex('A034 E1C0')",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "bytearray.fromhex('A034 E1C0')",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "lambda x, y, z: x + (y * z)",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "np.array([[True, 'A'], [False, 'B']])",
      "evaluate": true,
      "is_valid": false
    },
    {
      "value": "pd.DataFrame({'Name': ['Jack', 'Rick', 'Steve', 'Vicky'], 'Age': [28, 34, 29, 42]})",
      "evaluate": true,
      "is_valid": false
    }
  ]
}